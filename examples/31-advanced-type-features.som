// Advanced Type Features (Хусусиятҳои пешрафтаи навъҳо) Example
чоп.сабт("=== Хусусиятҳои Пешрафтаи Навъҳо ===");

// keyof operator - калидҳои
интерфейс Шахс {
    ном: сатр;
    синни_сол: рақам;
    почта: сатр;
    телефон: сатр;
}

// Using keyof to create a type of all keys
навъ КалидҳоиШахс = калидҳои Шахс; // "ном" | "синни_сол" | "почта" | "телефон"

функсия гирифтани_хосият(шахс: Шахс, калид: КалидҳоиШахс): ҳар {
    бозгашт шахс[калид];
}

тағйирёбанда шахс: Шахс = {
    ном: "Сомон",
    синни_сол: 25,
    почта: "somon@example.com",
    телефон: "+992 900 123456"
};

чоп.сабт("Номи шахс: " + гирифтани_хосият(шахс, "ном"));
чоп.сабт("Синни шахс: " + гирифтани_хосият(шахс, "синни_сол"));

// readonly modifier - танҳохонӣ
интерфейс Танзимот {
    танҳохонӣ версия: сатр;
    танҳохонӣ максималӣ_корбарон: рақам;
    танҳохонӣ режими_дебаг: мантиқӣ;
}

тағйирёбанда танзимот: Танзимот = {
    версия: "1.0.0",
    максималӣ_корбарон: 100,
    режими_дебаг: нодуруст
};

чоп.сабт("\n=== Танзимоти танҳохонӣ ===");
чоп.сабт("Версия: " + танзимот.версия);
чоп.сабт("Макс корбарон: " + танзимот.максималӣ_корбарон);
// танзимот.версия = "2.0.0"; // Error: Cannot assign to readonly property

// Making all properties readonly
навъ ТанҳохонӣШахс = {
    танҳохонӣ [К дар калидҳои Шахс]: Шахс[К];
};

тағйирёбанда шахси_собит: ТанҳохонӣШахс = {
    ном: "Алӣ",
    синни_сол: 30,
    почта: "ali@example.com",
    телефон: "+992 901 234567"
};

// unique symbols - беназир
тағйирёбанда рамзи_беназир = Symbol("махфӣ");
тағйирёбанда дигар_рамз = Symbol("махфӣ");

чоп.сабт("\n=== Рамзҳои беназир ===");
чоп.сабт("Рамзҳо баробар? " + (рамзи_беназир === дигар_рамз)); // false - each symbol is unique

интерфейс МаълумотиМахфӣ {
    [рамзи_беназир]: сатр;
    маълумоти_ошкор: сатр;
}

тағйирёбанда объекти_махфӣ: МаълумотиМахфӣ = {
    [рамзи_беназир]: "Ин маълумоти махфӣ аст",
    маълумоти_ошкор: "Ин ҳама метавонанд бинанд"
};

чоп.сабт("Маълумоти ошкор: " + объекти_махфӣ.маълумоти_ошкор);
чоп.сабт("Маълумоти махфӣ: " + объекти_махфӣ[рамзи_беназир]);

// infer keyword - инфер (used in conditional types)
навъ ГирифтаниБаргарданда<T> = T мерос (...аргументҳо: ҳар[]) => инфер R ? R : ниҳоӣ;

навъ НавъиБаргардандаи1 = ГирифтаниБаргарданда<() => сатр>; // сатр
навъ НавъиБаргардандаи2 = ГирифтаниБаргарданда<() => рақам>; // рақам

// Practical example with infer
навъ ГирифтаниНавъиЭлемент<T> = T мерос (инфер U)[] ? U : T;

навъ НавъиЭлементи1 = ГирифтаниНавъиЭлемент<сатр[]>; // сатр
навъ НавъиЭлементи2 = ГирифтаниНавъиЭлемент<рақам[]>; // рақам
навъ НавъиЭлементи3 = ГирифтаниНавъиЭлемент<мантиқӣ>; // мантиқӣ (not an array)

// Partial type - making all properties optional
навъ Қисмӣ<T> = {
    [П дар калидҳои T]?: T[П];
};

навъ ШахсиҚисмӣ = Қисмӣ<Шахс>;

тағйирёбанда шахси_қисмӣ: ШахсиҚисмӣ = {
    ном: "Фотима"
    // other properties are optional
};

чоп.сабт("\n=== Навъи қисмӣ ===");
чоп.сабт("Шахси қисмӣ: " + шахси_қисмӣ.ном);

// Required type - making all properties required
навъ Ҳатмӣ<T> = {
    [П дар калидҳои T]-?: T[П];
};

// Pick and Omit types
навъ Интихоб<T, К мерос калидҳои T> = {
    [П дар К]: T[П];
};

навъ Истисно<T, К мерос калидҳои T> = Интихоб<T, Exclude<калидҳои T, К>>;

// Using Pick to select specific properties
навъ МаълумотиАсосӣ = Интихоб<Шахс, "ном" | "синни_сол">;

тағйирёбанда асосӣ: МаълумотиАсосӣ = {
    ном: "Раҳмон",
    синни_сол: 22
};

// Using Omit to exclude properties
навъ ШахсиБеТелефон = Истисно<Шахс, "телефон">;

тағйирёбанда бе_телефон: ШахсиБеТелефон = {
    ном: "Мавлуда",
    синни_сол: 27,
    почта: "mavluda@example.com"
    // телефон property is excluded
};

чоп.сабт("\n=== Pick ва Omit ===");
чоп.сабт("Маълумоти асосӣ: " + асосӣ.ном + " (" + асосӣ.синни_сол + " сола)");
чоп.сабт("Бе телефон: " + бе_телефон.ном + " - " + бе_телефон.почта);

// Record type
навъ Сабт<К мерос калидҳо сатр | рақам | рамз, T> = {
    [П дар К]: T;
};

навъ РӯзҳоиКорӣ = "душанбе" | "сешанбе" | "чоршанбе" | "панҷшанбе" | "ҷумъа";
навъ СоатҳоиКорӣ = Сабт<РӯзҳоиКорӣ, { аз: сатр; то: сатр }>;

тағйирёбанда ҷадвали_корӣ: СоатҳоиКорӣ = {
    душанбе: { аз: "09:00", то: "18:00" },
    сешанбе: { аз: "09:00", то: "18:00" },
    чоршанбе: { аз: "09:00", то: "18:00" },
    панҷшанбе: { аз: "09:00", то: "18:00" },
    ҷумъа: { аз: "09:00", то: "17:00" }
};

чоп.сабт("\n=== Навъи Record ===");
чоп.сабт("Соатҳои корӣ дар душанбе: " + ҷадвали_корӣ.душанбе.аз + " - " + ҷадвали_корӣ.душанбе.то);
чоп.сабт("Соатҳои корӣ дар ҷумъа: " + ҷадвали_корӣ.ҷумъа.аз + " - " + ҷадвали_корӣ.ҷумъа.то);

// Exclude and Extract utility types
навъ T1 = "а" | "б" | "в" | "г";
навъ T2 = "а" | "в" | "д";

навъ Истиснои = Exclude<T1, T2>; // "б" | "г"
навъ Истихроҷи = Extract<T1, T2>; // "а" | "в"

// NonNullable - removes null and undefined
навъ T3 = сатр | рақам | беқимат | холӣ;
навъ T4 = NonNullable<T3>; // сатр | рақам

// Template literal types
навъ Ранг = "сурх" | "сабз" | "кабуд";
навъ Андоза = "хурд" | "миёна" | "калон";
навъ РангВаАндоза = `${Ранг}-${Андоза}`;
// Results in: "сурх-хурд" | "сурх-миёна" | "сурх-калон" | "сабз-хурд" | ...

функсия сохтани_идентификатор(ранг: Ранг, андоза: Андоза): РангВаАндоза {
    бозгашт `${ранг}-${андоза}`;
}

чоп.сабт("\n=== Навъҳои шаблонии литералӣ ===");
чоп.сабт("Идентификатор: " + сохтани_идентификатор("сурх", "калон"));
чоп.сабт("Идентификатор: " + сохтани_идентификатор("сабз", "хурд"));
