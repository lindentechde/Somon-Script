// Generic Types and Functions (Навъҳои умумӣ) Example
чоп.сабт("=== Навъҳои Умумӣ (Generics) ===");

// Generic function - identity function
функсия айният<T>(қимат: T): T {
    бозгашт қимат;
}

// Using generic function with different types
чоп.сабт("Айният (рақам): " + айният<рақам>(42));
чоп.сабт("Айният (сатр): " + айният<сатр>("Салом"));
чоп.сабт("Айният (мантиқӣ): " + айният<мантиқӣ>(дуруст));

// Generic function with multiple type parameters
функсия ҷуфт<T, U>(якум: T, дуюм: U): [T, U] {
    бозгашт [якум, дуюм];
}

тағйирёбанда ҷуфти_маълумот = ҷуфт<сатр, рақам>("Синну сол", 25);
чоп.сабт("Ҷуфт: [" + ҷуфти_маълумот[0] + ", " + ҷуфти_маълумот[1] + "]");

// Generic interface
интерфейс Контейнер<T> {
    қимат: T;
    гирифтан(): T;
    танзим(қимат: T): холӣ;
}

// Generic class - Box
синф Қуттӣ<T> татбиқ Контейнер<T> {
    хосусӣ қимат: T;
    
    конструктор(қимати_ибтидоӣ: T) {
        ин.қимат = қимати_ибтидоӣ;
    }
    
    функсия гирифтан(): T {
        бозгашт ин.қимат;
    }
    
    функсия танзим(қимат: T): холӣ {
        ин.қимат = қимат;
    }
}

// Using generic class
тағйирёбанда қуттии_рақам = нав Қуттӣ<рақам>(100);
чоп.сабт("Қуттии рақам: " + қуттии_рақам.гирифтан());
қуттии_рақам.танзим(200);
чоп.сабт("Қуттии рақам (нав): " + қуттии_рақам.гирифтан());

тағйирёбанда қуттии_сатр = нав Қуттӣ<сатр>("Тоҷикистон");
чоп.сабт("Қуттии сатр: " + қуттии_сатр.гирифтан());

// Generic class with constraints
синф РӯйхатиМуратабшуда<T мерос рақам | сатр> {
    хосусӣ элементҳо: T[] = [];
    
    функсия илова(элемент: T): холӣ {
        ин.элементҳо.илова(элемент);
        ин.элементҳо.sort();
    }
    
    функсия гирифтани_ҳама(): T[] {
        бозгашт ин.элементҳо;
    }
    
    функсия ёфтан(элемент: T): мантиқӣ {
        бозгашт ин.элементҳо.кофтан(элемент) !== -1;
    }
}

// Using constrained generic class
тағйирёбанда рӯйхати_рақамҳо = нав РӯйхатиМуратабшуда<рақам>();
рӯйхати_рақамҳо.илова(45);
рӯйхати_рақамҳо.илова(12);
рӯйхати_рақамҳо.илова(78);
рӯйхати_рақамҳо.илова(23);
чоп.сабт("Рақамҳои муратабшуда: " + рӯйхати_рақамҳо.гирифтани_ҳама().ҷудокунӣ(", "));

// Generic function with array
функсия якумин<T>(массив: T[]): T | беқимат {
    агар (массив.дарозӣ > 0) {
        бозгашт массив[0];
    }
    бозгашт беқимат;
}

функсия охирин<T>(массив: T[]): T | беқимат {
    агар (массив.дарозӣ > 0) {
        бозгашт массив[массив.дарозӣ - 1];
    }
    бозгашт беқимат;
}

тағйирёбанда номҳо = ["Алӣ", "Фотима", "Раҳмон"];
чоп.сабт("Номи якум: " + якумин<сатр>(номҳо));
чоп.сабт("Номи охирин: " + охирин<сатр>(номҳо));

// Generic type alias
навъ Натиҷа<T> = {
    муваффақият: мантиқӣ;
    маълумот?: T;
    хато?: сатр;
};

функсия коркарди_маълумот<T>(маълумот: T): Натиҷа<T> {
    кӯшиш {
        // Simulate processing
        агар (маълумот != беқимат) {
            бозгашт {
                муваффақият: дуруст,
                маълумот: маълумот
            };
        } вагарна {
            бозгашт {
                муваффақият: нодуруст,
                хато: "Маълумот холӣ аст"
            };
        }
    } гирифтан (хато) {
        бозгашт {
            муваффақият: нодуруст,
            хато: хато.паём
        };
    }
}

тағйирёбанда натиҷа1 = коркарди_маълумот<рақам>(42);
агар (натиҷа1.муваффақият) {
    чоп.сабт("Натиҷа: " + натиҷа1.маълумот);
} вагарна {
    чоп.хато("Хато: " + натиҷа1.хато);
}

// Generic Stack implementation
синф Стек<T> {
    хосусӣ элементҳо: T[] = [];
    
    функсия даровардан(элемент: T): холӣ {
        ин.элементҳо.илова(элемент);
    }
    
    функсия баровардан(): T | беқимат {
        бозгашт ин.элементҳо.баровардан();
    }
    
    функсия нигоҳ(): T | беқимат {
        агар (ин.элементҳо.дарозӣ > 0) {
            бозгашт ин.элементҳо[ин.элементҳо.дарозӣ - 1];
        }
        бозгашт беқимат;
    }
    
    функсия холӣ_аст(): мантиқӣ {
        бозгашт ин.элементҳо.дарозӣ === 0;
    }
    
    функсия андоза(): рақам {
        бозгашт ин.элементҳо.дарозӣ;
    }
}

чоп.сабт("\n=== Стек бо Generics ===");
тағйирёбанда стеки_рақамҳо = нав Стек<рақам>();
стеки_рақамҳо.даровардан(10);
стеки_рақамҳо.даровардан(20);
стеки_рақамҳо.даровардан(30);

чоп.сабт("Андозаи стек: " + стеки_рақамҳо.андоза());
чоп.сабт("Элементи болоӣ: " + стеки_рақамҳо.нигоҳ());
чоп.сабт("Баровардан: " + стеки_рақамҳо.баровардан());
чоп.сабт("Андозаи нав: " + стеки_рақамҳо.андоза());
