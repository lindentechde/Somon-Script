#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { performance } = require('perf_hooks');
const { compile } = require('../dist/compiler');

console.log('üöÄ SomonScript Performance Benchmarks\n');

// Test files of different complexities
const testFiles = {
  small: `—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –Ω–æ–º: —Å–∞—Ç—Ä = "–ê“≥–º–∞–¥";
—á–æ–ø.—Å–∞–±—Ç(–Ω–æ–º);`,

  medium: `–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ö–æ—Ä–±–∞—Ä {
  –Ω–æ–º: —Å–∞—Ç—Ä;
  —Å–∏–Ω–Ω—É_—Å–æ–ª: —Ä–∞“õ–∞–º;
  email?: —Å–∞—Ç—Ä;
}

—Ñ—É–Ω–∫—Å–∏—è —Å–∞–ª–æ–º_–≥—É—Ñ—Ç–∞–Ω(–∫–æ—Ä–±–∞—Ä: –ö–æ—Ä–±–∞—Ä): —Å–∞—Ç—Ä {
  –±–æ–∑–≥–∞—à—Ç "–°–∞–ª–æ–º, " + –∫–æ—Ä–±–∞—Ä.–Ω–æ–º;
}

—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∫–æ—Ä–±–∞—Ä“≥–æ: –ö–æ—Ä–±–∞—Ä[] = [
  { –Ω–æ–º: "–ê“≥–º–∞–¥", —Å–∏–Ω–Ω—É_—Å–æ–ª: 25 },
  { –Ω–æ–º: "–§–æ—Ç–∏–º–∞", —Å–∏–Ω–Ω—É_—Å–æ–ª: 30, email: "fotima@example.com" }
];

–±–∞—Ä–æ–∏ (—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∏ = 0; –∏ < –∫–æ—Ä–±–∞—Ä“≥–æ.–¥–∞—Ä–æ–∑”£; –∏++) {
  —á–æ–ø.—Å–∞–±—Ç(—Å–∞–ª–æ–º_–≥—É—Ñ—Ç–∞–Ω(–∫–æ—Ä–±–∞—Ä“≥–æ[–∏]));
}`,

  complex: `// Complex type system test
–Ω–∞–≤—ä –ö–æ—Ä–±–∞—Ä–ò–î = —Å–∞—Ç—Ä;
–Ω–∞–≤—ä –°–∏–Ω–Ω—É_—Å–æ–ª = —Ä–∞“õ–∞–º;

–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°—É—Ä–æ“ì–∞ {
  –∫”Ø—á–∞: —Å–∞—Ç—Ä;
  —à–∞“≥—Ä: —Å–∞—Ç—Ä;
  –∫–∏—à–≤–∞—Ä: —Å–∞—Ç—Ä;
}

–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ö–æ—Ä–±–∞—Ä–∏–ü—É—Ä—Ä–∞ {
  –Ω–æ–º: —Å–∞—Ç—Ä;
  —Å–∏–Ω–Ω—É_—Å–æ–ª: –°–∏–Ω–Ω—É_—Å–æ–ª;
  –∏–¥: –ö–æ—Ä–±–∞—Ä–ò–î;
  —Å—É—Ä–æ“ì–∞: –°—É—Ä–æ“ì–∞;
  —Ç–µ–ª–µ—Ñ–æ–Ω?: —Å–∞—Ç—Ä;
  —Ñ–∞—ä–æ–ª: –º–∞–Ω—Ç–∏“õ”£;
}

—Ñ—É–Ω–∫—Å–∏—è —ç“∑–æ–¥–∏_–∫–æ—Ä–±–∞—Ä(
  –Ω–æ–º: —Å–∞—Ç—Ä,
  —Å–∏–Ω–Ω—É_—Å–æ–ª: —Ä–∞“õ–∞–º,
  —Å—É—Ä–æ“ì–∞: –°—É—Ä–æ“ì–∞
): –ö–æ—Ä–±–∞—Ä–∏–ü—É—Ä—Ä–∞ {
  –±–æ–∑–≥–∞—à—Ç {
    –Ω–æ–º: –Ω–æ–º,
    —Å–∏–Ω–Ω—É_—Å–æ–ª: —Å–∏–Ω–Ω—É_—Å–æ–ª,
    –∏–¥: "user_" + –Ω–æ–º.toLowerCase(),
    —Å—É—Ä–æ“ì–∞: —Å—É—Ä–æ“ì–∞,
    —Ñ–∞—ä–æ–ª: –¥—É—Ä—É—Å—Ç
  };
}

—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∫–æ—Ä–±–∞—Ä“≥–æ: –ö–æ—Ä–±–∞—Ä–∏–ü—É—Ä—Ä–∞[] = [];

–±–∞—Ä–æ–∏ (—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∏ = 0; –∏ < 100; –∏++) {
  —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∫–æ—Ä–±–∞—Ä = —ç“∑–æ–¥–∏_–∫–æ—Ä–±–∞—Ä(
    "–ö–æ—Ä–±–∞—Ä" + –∏,
    20 + –∏,
    {
      –∫”Ø—á–∞: "–ö”Ø—á–∞–∏ " + –∏,
      —à–∞“≥—Ä: "–î—É—à–∞–Ω–±–µ",
      –∫–∏—à–≤–∞—Ä: "–¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω"
    }
  );
  –∫–æ—Ä–±–∞—Ä“≥–æ.–∏–ª–æ–≤–∞(–∫–æ—Ä–±–∞—Ä);
}

—Ñ—É–Ω–∫—Å–∏—è “≥–∏—Å–æ–±–∏_–º–∏—ë–Ω–∞–∏_—Å–∏–Ω–Ω—É_—Å–æ–ª(–∫–æ—Ä–±–∞—Ä“≥–æ: –ö–æ—Ä–±–∞—Ä–∏–ü—É—Ä—Ä–∞[]): —Ä–∞“õ–∞–º {
  —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ “∑–∞–º—ä = 0;
  –±–∞—Ä–æ–∏ (—Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞ –∫–æ—Ä–±–∞—Ä of –∫–æ—Ä–±–∞—Ä“≥–æ) {
    “∑–∞–º—ä += –∫–æ—Ä–±–∞—Ä.—Å–∏–Ω–Ω—É_—Å–æ–ª;
  }
  –±–æ–∑–≥–∞—à—Ç “∑–∞–º—ä / –∫–æ—Ä–±–∞—Ä“≥–æ.–¥–∞—Ä–æ–∑”£;
}`,
};

function benchmark(name, source, iterations = 10) {
  console.log(`üìä Benchmarking ${name}:`);
  console.log(`   Source size: ${source.length} characters`);

  const times = [];
  let totalErrors = 0;

  for (let i = 0; i < iterations; i++) {
    const start = performance.now();

    try {
      const result = compile(source, { strict: true });
      const end = performance.now();

      times.push(end - start);
      totalErrors += result.errors.length;

      if (result.errors.length > 0) {
        console.log(`   ‚ö†Ô∏è  Iteration ${i + 1}: ${result.errors.length} errors`);
      }
    } catch (error) {
      console.log(`   ‚ùå Iteration ${i + 1}: ${error.message}`);
      totalErrors++;
    }
  }

  if (times.length > 0) {
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);

    console.log(`   ‚è±Ô∏è  Average: ${avgTime.toFixed(2)}ms`);
    console.log(`   ‚ö° Fastest: ${minTime.toFixed(2)}ms`);
    console.log(`   üêå Slowest: ${maxTime.toFixed(2)}ms`);
    console.log(`   üìà Throughput: ${((source.length / avgTime) * 1000).toFixed(0)} chars/sec`);
  }

  console.log(
    `   ‚úÖ Success rate: ${(((iterations - totalErrors) / iterations) * 100).toFixed(1)}%`
  );
  console.log('');
}

// Run benchmarks
benchmark('Small File', testFiles.small);
benchmark('Medium File', testFiles.medium);
benchmark('Complex File', testFiles.complex);

// Memory usage
const memUsage = process.memoryUsage();
console.log('üíæ Memory Usage:');
console.log(`   RSS: ${(memUsage.rss / 1024 / 1024).toFixed(2)} MB`);
console.log(`   Heap Used: ${(memUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`);
console.log(`   Heap Total: ${(memUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);
console.log(`   External: ${(memUsage.external / 1024 / 1024).toFixed(2)} MB`);

console.log('\nüéâ Benchmark completed!');
